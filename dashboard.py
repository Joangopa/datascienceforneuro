import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import joblib

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

from scipy.stats import shapiro, ttest_ind, mannwhitneyu





# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Meu Dashboard Anal√≠tico",
    page_icon="üìä",
    layout="wide"
)

st.markdown(
    """
    <style>
        .stApp {
            background-color: #f0f0f0;  /* Cor de fundo cinza claro */
        }
    </style>
    """, 
    unsafe_allow_html=True
)

# Carregar os dados
@st.cache_data
def load_data():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    return data

data = load_data()

@st.cache_data
def load_data2():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    # Filtrar os dados onde MMSE e CDR n√£o s√£o nulos
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    data["CDR"] = data["CDR"].astype(str)

    return data

data2 = load_data2()








# Criando as abas
title, tab1,  estudo, tab2, tab3, tab4, tab_pred, tab_pca, tab_simulacao = st.tabs(["-", "üìå Introdu√ß√£o ao Problema", "Estudo",  
                                                  "üìä Introdu√ß√£o aos Dados", "üìà An√°lises", "Conclus√µes",
                                                  "Predi√ß√µes", "PCA e Agrupamento", "Simula√ß√µes"])

with title:
    st.markdown(
        """
        <h1 style="text-align: center; font-size: 40px; color: #0073e6;">
            An√°lise de Alzheimer: Diagn√≥stico e Tend√™ncias
        </h1>
        """,
        unsafe_allow_html=True
    )
    col1, col2, col3 = st.columns([1, 1, 1])

    with col2:
        st.image("image_title.webp", use_container_width =False,  width=400)


with tab1:
    
    col1, col2 = st.columns([1, 1])

    with col1:
        
        # st.subheader("Introdu√ß√£o ao Problema")
        with st.container(border=True):  
            st.write("""
                    - A doen√ßa de Alzheimer √© uma doen√ßa cerebral degenerativa sem cura
                    - √â caracterizada por atrofia progressiva do c√≥rtex cerebral
                    - Causa perda de mem√≥ria, aumento dos d√©ficits cognitivos e potencial perda das fun√ß√µes motoras
                    - Com um diagn√≥stico precoce, a progress√£o pode ser retardada e os sintomas tratados.
            """)

            # Criando tr√™s colunas: esquerda, centralizada e direita
        col_empty1, col_img, col_empty2 = st.columns([1, 2, 3])

        with col_img:
            st.image("brain_atrophy.jpg", caption="Atrofia Cerebral", width=400)
        
    with col2:  
        # Voc√™ pode adicionar imagens, gr√°ficos ou outros elementos
        
        st.image("sinais-de-alzheimer.jpg", caption="Sinais de Alzheimer", width=500)


with estudo: 

    st.subheader("Descri√ß√£o da coleta dos dados:")

    with st.container(border=True):  # Dispon√≠vel no Streamlit >= 1.29.0
            st.write("""
                    - 416 pessoas participaram do estudo;
                    - Idades entre 18 e 96 anos;
                    - Para cada pessoa, s√£o inclu√≠das dados de resson√¢ncias magn√©ticas individuais, obtidas em sess√µes de varredura √∫nica;
                    - Todos destros;
                    - Inclui homens e mulheres;
                    - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes fotografados em uma visita subsequente dentro de 90 dias de sua sess√£o inicial.
            """)

with tab2:

    
    # st.header("Introdu√ß√£o aos Dados")
    
    # Criando duas colunas (a primeira ser√° mais larga para a imagem)
    col1, col2 = st.columns([1, 1])  # Propor√ß√£o 2:3 (ajuste conforme necess√°rio)
    
    

    with col1:
        info_variaveis_ = {
        "Vari√°vel": ["ID", "M/F", "Hand", "Age", "Educ", "SES", "eTIV", "ASF", "nWBV",  "MMSE", "CDR"],
        "Defini√ß√£o": [
            "Identification", "Gender", "Dominant Hand", "Age in years", 
            "Education Level", "Socioeconomic Status", 
            "Estimated Total Intracranial Volume",
            "Atlas Scaling Factor",
            "Normalize Whole Brain Volume",
            "Mini Mental State Examination",  
            "Clinical Dementia Rating"
        ],
        "Valores": [
            " ", "M = Male, F = Female", "R = Right, L = Left", " ", 
            "1 = < Ensino M√©dio\n2 = Ensino M√©dio Completo\n3 = Ensino Superior Incompleto\n4 = Ensino Superior Completo\n5 = P√≥s-Gradua√ß√£o",
            "1 = Classe Baixa\n2 = Classe M√©dia Baixa\n3 = Classe M√©dia\n4 = Classe M√©dia Alta\n5 = Classe Alta",
            
            
            " ", " ", " ", " 0 - 30 ", 
            "0 = Sem Dem√™ncia\n0.5 = Dem√™ncia Muito Leve\n1 = Dem√™ncia Leve\n2 = Dem√™ncia Moderada",
        ]
        }
        info_variaveis = pd.DataFrame(info_variaveis_)
        st.subheader("Tabela de Vari√°veis")
        # st.dataframe(info_variaveis, use_container_width=True,hide_index=True)
        st.markdown(
            """
            <style>
            table {
                width: 80%;
                
            }
            th {
                color: #0073e6 !important; /* For√ßa a mudan√ßa da cor */
                font-weight: bold; /* Deixa o texto em negrito */
                white-space: nowrap; /* Mant√©m o texto em uma linha */
                border: 1px solid black !important;
            }
            td {
                white-space: pre-wrap;
                border: 1px solid black !important;
            }
            </style>
            """,
            unsafe_allow_html=True
            )
        
        st.table(info_variaveis)  

    with col2:
        st.subheader("Exemplo de Mini Mental State Examination")

        st.image("mmse.jpg", use_container_width=False, width=800)

with tab3:
    
    # st.header("An√°lise de Correla√ß√£o")

    subtab1, subtab2, subtab3, subtab4 = st.tabs(["Distribui√ß√£o de CDR", "An√°lise de Correla√ß√£o", "vWBV vs CDR", "MMSE vs CDR"])
    
    

    with subtab1:

        col1, col2 = st.columns([2, 1])
        
        with col1:
            cdr_table = data.groupby(['CDR']).size().reset_index(name='Count')
            
            cdr_descricao = {
                    0.0: 'Sem dem√™ncia',
                    0.5: 'Dem√™ncia muito leve',
                    1.0: 'Dem√™ncia leve',
                    2.0: 'Dem√™ncia moderada'
                }

                        # Substituir os valores da coluna CDR
            cdr_table['Interpreta√ß√£o'] = cdr_table['CDR'].map(cdr_descricao)

            cdr_table = cdr_table[['CDR','Interpreta√ß√£o','Count']]

            #st.dataframe(
            #        cdr_table.style
            #        .background_gradient(cmap='Blues', subset=['Count'])
            #        .format({'Count': '{:,}', 'CDR': '{:.1f}'}),  # Formata n√∫meros com separador de milhar
            #        use_container_width=False,  # N√£o usar toda a largura
            #        hide_index=True
            #    )
        
            plt.figure(figsize=(4, 2))
            ax = sns.barplot(x='Count', y='Interpreta√ß√£o', data=cdr_table, hue='Interpreta√ß√£o', palette='viridis', dodge=False)

            # Adicionando os valores de contagem no final de cada barra
            for index, row in cdr_table.iterrows():
                ax.text(row['Count'] + 1, index, str(row['Count']), color='black', va='center')

            # Remover as bordas do gr√°fico
            for spine in ax.spines.values():
                spine.set_visible(False)

            # Adicionando t√≠tulos e r√≥tulos
            plt.title('Distribui√ß√£o de Casos por Tipo de Dem√™ncia')
            plt.xlabel('Contagem')
            plt.ylabel('Tipo de Dem√™ncia')

            # Exibindo o gr√°fico no Streamlit
            st.pyplot(plt, use_container_width=False)
        
        with col2:
            st.markdown("""
            - 100 dos sujeitos inclu√≠dos com mais de 60 anos foram clinicamente diagnosticados com doen√ßa de Alzheimer muito leve a moderada.
            - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes.
            """)
        

    with subtab2:
    
        # Criar duas colunas (1:2 - a figura ocupar√° 1/3 do espa√ßo)
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Cria a figura menor
            fig, ax = plt.subplots(figsize=(5, 3))  # Tamanho reduzido
            corr_spearman = data.corr(method='spearman', numeric_only=True)
            mask = np.triu(np.ones_like(corr_spearman, dtype=bool))
            
            sns.heatmap(
                corr_spearman,
                mask=mask,
                annot=True,
                fmt=".2f",
                cmap='coolwarm',
                center=0,
                vmin=-1,
                vmax=1,
                cbar_kws={"shrink": 0.6},
                ax=ax,
                annot_kws={"size": 6} 
            )
            
            # Ajustar fonte da colorbar
            cbar = ax.collections[0].colorbar
            cbar.ax.tick_params(labelsize=6) 

            ax.set_title("Correla√ß√£o (Spearman)", fontsize=10)
            plt.xticks(rotation=45, fontsize=6)
            plt.yticks(rotation=0, fontsize=6)
            plt.tight_layout()
            
            st.pyplot(fig, use_container_width=False)
        
        with col2:
            st.markdown("""
            **Mapa de Correla√ß√£o de Spearman**
            
            Este gr√°fico mostra as rela√ß√µes entre as vari√°veis num√©ricas:
            
            - **Correla√ß√£o Positiva (+1)**
            - **Correla√ß√£o Negativa (-1)**
            - **Sem Correla√ß√£o (0)**
            """)

    with subtab3:

        st.title("An√°lise Estat√≠stica de nWBV entre Pacientes com e sem Dem√™ncia")

        fig2 = px.scatter(
        data2,
        x='Age',
        y='nWBV',
        color='CDR',
        size='eTIV',
        hover_name='ID',
        title='Volume Cerebral Normalizado por Idade e CDR',
        labels={'Age': 'Idade', 'nWBV': 'Volume Cerebral Normalizado', 'CDR': 'CDR'},
        color_discrete_sequence=['#6baed6', '#1f78b4', '#fb9a99', '#e31a1c']  
    )
        st.plotly_chart(fig2, use_container_width=True)

        nwbv_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR'] >0), ['nWBV']].reset_index(drop=True)
        nwbv_nao_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR']  == 0), ['nWBV']]

        def cohens_d(x, y):
            nx = len(x)
            ny = len(y)
            dof = nx + ny - 2
            pooled_std = np.sqrt(((nx-1)*np.std(x, ddof=1)**2 + (ny-1)*np.std(y, ddof=1)**2) / dof)
            return (np.mean(x) - np.mean(y)) / pooled_std
    
        st.header("1. Distribui√ß√£o de nWBV")
    
        col1, col2 = st.columns(2)
        
        # Gr√°ficos individuais
        with col1:
            fig, ax = plt.subplots()
            sns.histplot(nwbv_doentes_maiores_60['nWBV'], kde=True, color='red', label='CDR > 0')
            plt.title("Distribui√ß√£o para Doentes (CDR > 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        with col2:
            fig, ax = plt.subplots()
            sns.histplot(nwbv_nao_doentes_maiores_60['nWBV'], kde=True, color='green', label='CDR = 0')
            plt.title("Distribui√ß√£o para N√£o Doentes (CDR = 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        # Gr√°fico de compara√ß√£o - Boxplot
        st.subheader("Compara√ß√£o entre Grupos")
        fig, ax = plt.subplots(figsize=(10, 6))

        # Preparar os dados para compara√ß√£o
        nwbv_doentes_maiores_60['Grupo'] = 'CDR > 0'
        nwbv_nao_doentes_maiores_60['Grupo'] = 'CDR = 0'
        dados_comparacao = pd.concat([nwbv_doentes_maiores_60, nwbv_nao_doentes_maiores_60])

        # Criar o boxplot
        sns.boxplot(x='Grupo', y='nWBV', data=dados_comparacao,
                    hue='Grupo', 
                    palette={'CDR > 0': 'red', 'CDR = 0': 'green'}, 
                    order=['CDR > 0', 'CDR = 0'],
                    legend=False)

        plt.title("Compara√ß√£o de nWBV entre Doentes e N√£o Doentes (CDR > 0 vs CDR = 0)")
        plt.ylabel("Valor de nWBV")
        plt.xlabel("Grupo")
        st.pyplot(fig)



        # Se√ß√£o 2: Testes de Normalidade
        st.header("Testes de Normalidade (Shapiro-Wilk)")
        with st.container():
    
            st.write("")  # Espa√ßamento
            alpha1 = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                            min_value=0.01, 
                            max_value=0.10, 
                            value=0.05, 
                            step=0.01,
                            help="N√≠vel de signific√¢ncia para os testes estat√≠sticos",
                            key = "alpha_nwbv")
    
        
        stat_doentes, p_doentes = shapiro(nwbv_doentes_maiores_60['nWBV'])
        stat_nao_doentes, p_nao_doentes = shapiro(nwbv_nao_doentes_maiores_60['nWBV'])
        
        norm_col1, norm_col2 = st.columns(2)
        
        with norm_col1:
            st.metric(label="Doentes (CDR > 0)", 
                    value=f"p = {p_doentes:.4f}",
                    help="H‚ÇÄ: Os dados s√£o normalmente distribu√≠dos")
            st.write("Conclus√£o:", "Normal" if p_doentes > alpha1 else "N√£o normal")
        
        with norm_col2:
            st.metric(label="N√£o Doentes (CDR = 0)", 
                    value=f"p = {p_nao_doentes:.4f}",
                    help="H‚ÇÄ: Os dados s√£o normalmente distribu√≠dos")
            st.write("Conclus√£o:", "Normal" if p_nao_doentes > alpha1 else "N√£o normal")
        
        # Se√ß√£o 3: Teste T e Tamanho do Efeito
        st.header("3. Compara√ß√£o entre Grupos")
        
        t_stat, p_valor = ttest_ind(
            nwbv_doentes_maiores_60['nWBV'],
            nwbv_nao_doentes_maiores_60['nWBV'],
            alternative='less'
        )
        
        d = cohens_d(nwbv_doentes_maiores_60['nWBV'], nwbv_nao_doentes_maiores_60['nWBV'])
        
        st.subheader("Teste T para Amostras Independentes")
        st.write(f"""
        - **Hip√≥tese nula (H‚ÇÄ):** N√£o h√° diferen√ßa no nWBV entre os grupos (ou doentes t√™m nWBV maior/igual)
        - **Hip√≥tese alternativa (H‚ÇÅ):** Doentes t√™m nWBV menor (teste unilateral)
        """)
        
        st.metric(label="Valor-p", 
                value=f"{p_valor:.6f}",
                delta="Significativo" if p_valor < alpha1 else "N√£o significativo",
                delta_color="inverse")
        
        st.write(f"**Conclus√£o:** {'Rejeitamos H‚ÇÄ' if p_valor < alpha1 else 'N√£o rejeitamos H‚ÇÄ'} a um Œ± = {alpha1}")
        
        st.subheader("Tamanho do Efeito (Cohen's d)")
        
        effect_size = st.container()
        with effect_size:
            col1, col2 = st.columns([1, 3])
            
            with col1:
                st.metric(label="Cohen's d", value=f"{d:.2f}")
            
            with col2:
                st.write("""
                | Valor | Interpreta√ß√£o |
                |-------|---------------|
                | 0.2   | Pequeno       |
                | 0.5   | M√©dio         |
                | 0.8   | Grande        |
                """)
                st.write(f"**Interpreta√ß√£o:** {'Grande' if abs(d) >= 0.8 else 'M√©dio' if abs(d) >= 0.5 else 'Pequeno'} efeito")



    with subtab4:
        
        st.header("An√°lise Comparativa de MMSE entre Pacientes com e sem Dem√™ncia")

        col1, col2 = st.columns([2, 1])
        
        with col1:
            custom_colors = ['#6baed6', '#1f78b4', '#fb9a99', '#e31a1c']   # Azul claro, azul escuro, vermelho claro, vermelho escuro

            # Criando o gr√°fico
            fig5 = px.histogram(
                data,
                x='MMSE',
                color='CDR',
                nbins=20,
                title='Distribui√ß√£o do MMSE por CDR',
                labels={'MMSE': 'Pontua√ß√£o MMSE', 'CDR': 'CDR'},
                color_discrete_sequence=custom_colors  # Usando a paleta de cores personalizada
            )

            st.plotly_chart(fig5, use_container_width=False)

        with col2:
            with st.container(border=True): 
                st.markdown("""
                Temos que 82% dos pacientes considerados obtiveram resultado superior a 23 no MMSE, 
                onde 70% deles apresentaram um CDR = 0 e um 27% apresentaram CDR = 0.5. 
                E 100% dos pacientes com CDR = 0 obtiveram resultado superior a 23.
                """)


        
    
        with st.container():
            st.write("")  # Espa√ßamento
            nivel_significancia  = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                    min_value=0.01, 
                    max_value=0.10, 
                    value=0.05, 
                    step=0.01,
                    help="N√≠vel de signific√¢ncia para os testes estat√≠sticos",
                    key = "alpha_mmse")

          
        idade_minima = 60


        #  Filtrar os dados
        mmse_doentes = data.loc[(data['Age'] > idade_minima) & (data['CDR'] > 0), ['MMSE']].reset_index(drop=True)
        mmse_nao_doentes = data.loc[(data['Age'] > idade_minima) & (data['CDR'] == 0), ['MMSE']].reset_index(drop=True)

        # Layout em colunas
        col1, col2 = st.columns(2)

        # Coluna 1: Estat√≠sticas Descritivas
        with col1:
            # Teste de normalidade
            st.write("**Teste de Normalidade (Shapiro-Wilk):**")
            stat_doentes, p_doentes = shapiro(mmse_doentes['MMSE'])
            stat_nao_doentes, p_nao_doentes = shapiro(mmse_nao_doentes['MMSE'])
            
            st.write(f"- Pacientes com CDR > 0: p-valor = {p_doentes:.4f}")
            st.write(f"- Pacientes com CDR = 0: p-valor = {p_nao_doentes:.4f}")
            
            # Interpreta√ß√£o
            if p_doentes < 0.05 or p_nao_doentes < 0.05:
                st.warning("Os dados n√£o seguem uma distribui√ß√£o normal (p < 0.05). Usando teste n√£o param√©trico.")
            else:
                st.success("Os dados seguem uma distribui√ß√£o normal (p ‚â• 0.05). Pode-se usar teste param√©trico.")

        # Coluna 2: Testes Estat√≠sticos
        with col2:
                    
            
            # Teste de Mann-Whitney
            st.write("\n**Teste de Mann-Whitney U (diferen√ßa entre grupos):**")
            u_stat, p_valor = mannwhitneyu(
                mmse_doentes['MMSE'],
                mmse_nao_doentes['MMSE'],
                alternative='less'
            )
            
            st.write(f"- Estat√≠stica U = {u_stat:.2f}")
            st.write(f"- p-valor = {p_valor:.4f}")
            
            # Interpreta√ß√£o do resultado
            st.write("\n**Interpreta√ß√£o:**")
            st.write("Hip√≥tese nula (H‚ÇÄ): N√£o h√° diferen√ßa no MMSE entre os grupos.")
            st.write("Hip√≥tese alternativa (H‚ÇÅ): Pacientes com dem√™ncia (CDR>0) t√™m MMSE menor.")
            
            if p_valor < nivel_significancia:
                st.error(f"Rejeitamos H‚ÇÄ (p < {nivel_significancia}). H√° evid√™ncias de que pacientes com dem√™ncia t√™m MMSE significativamente menor.")
            else:
                st.success(f"N√£o rejeitamos H‚ÇÄ (p ‚â• {nivel_significancia}). N√£o h√° evid√™ncias suficientes para afirmar que pacientes com dem√™ncia t√™m MMSE menor.")

        # Gr√°ficos
        st.subheader("Visualiza√ß√£o dos Dados")

        mmse_doentes['Grupo'] = 'CDR > 0'
        mmse_nao_doentes['Grupo'] = 'CDR = 0'
        dados_comparacao_mmse = pd.concat([mmse_doentes, mmse_nao_doentes])

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Boxplot
        
        # Criar o boxplot
        sns.boxplot(x='Grupo', y='MMSE', data=dados_comparacao_mmse,
                    hue='Grupo', 
                    palette={'CDR > 0': 'red', 'CDR = 0': 'green'}, 
                    order=['CDR > 0', 'CDR = 0'],
                    ax=ax1,
                    legend=False)
        
        ax1.set_xticks([0, 1])  # Explicitly set ticks before labels
        ax1.set_xticklabels(['CDR > 0', 'CDR = 0'])  # Fixed order to match the boxplot
        ax1.set_title('Distribui√ß√£o de MMSE entre Doentes e N√£o Doentes')
        ax1.set_ylabel('Pontua√ß√£o MMSE')
        ax1.set_xlabel('Grupo')
        

        # Histograma
        sns.histplot(mmse_nao_doentes['MMSE'], color='skyblue', label='CDR = 0', 
                    kde=True, ax=ax2, alpha=0.5)
        sns.histplot(mmse_doentes['MMSE'], color='salmon', label='CDR > 0', 
                    kde=True, ax=ax2, alpha=0.5)
        ax2.set_xlabel('Pontua√ß√£o MMSE')
        ax2.set_ylabel('Frequ√™ncia')
        ax2.set_title('Distribui√ß√£o de MMSE')
        ax2.legend()

        st.pyplot(fig)

        # Informa√ß√µes adicionais
        with st.expander("Sobre esta an√°lise"):
            st.write("""
            **Metodologia:**
            - Compara√ß√£o de pontua√ß√µes MMSE entre pacientes com e sem dem√™ncia (CDR > 0 vs CDR = 0)
            - Teste de Shapiro-Wilk para verificar normalidade dos dados
            - Teste U de Mann-Whitney (n√£o param√©trico) para comparar os grupos
            
            **MMSE (Mini-Mental State Examination):**
            - Avalia√ß√£o cognitiva com pontua√ß√£o de 0 a 30
            - Pontua√ß√µes mais baixas indicam maior comprometimento cognitivo
            
            **CDR (Clinical Dementia Rating):**
            - 0: Sem dem√™ncia
            - 0.5: Dem√™ncia question√°vel
            - 1: Dem√™ncia leve
            - 2: Dem√™ncia moderada
            """)



























with tab4:
      st.subheader("Conclus√µes")

      with st.container(border=True): 
                st.markdown("""
                - Neste estudo, √© um exemplo de que baixos resultados no MMSE s√£o um sinal de alerta para poss√≠veis casos de dem√™ncia.

                - Pode-se considerar realizar o MMSE a partir dos 60 anos.

                - Exames de imagem s√£o recomendados para fornecer uma conclus√£o ap√≥s os resultados do MMSE.
                """)

with tab_pred:
    # Carregar o modelo salvo
    model = joblib.load('decision_tree_model.pkl')

    # T√≠tulo do app
    st.title("Classifica√ß√£o de Dem√™ncia (CDR)")

    st.subheader("Preencha os dados do paciente:")

    # Layout em duas colunas
    col1, col2 = st.columns(2)

    with col1:
        gender = st.selectbox("Sexo (M/F)", ['M', 'F'])
        educ = st.selectbox("N√≠vel educacional", [1, 2, 3, 4, 5])
        age = st.number_input("Idade", min_value=0, max_value=120, value=75)
        etiv = st.number_input("Volume Total Intracraniano Estimado", value=1500.0)

    with col2:
        ses = st.selectbox("Status socioecon√¥mico", [1, 2, 3, 4, 5])
        mmse = st.number_input("Mini-Exame do Estado Mental", min_value=0, max_value=30, value=28)
        nwbv = st.number_input("Volume Normalizado de Mat√©ria Branca", value=0.75)

    # Montar DataFrame com os dados inseridos
    input_df = pd.DataFrame({
        'M/F': [gender],
        'Educ': [educ],
        'SES': [ses],
        'Age': [age],
        'MMSE': [mmse],
        'eTIV': [etiv],
        'nWBV': [nwbv]
    })

    # Bot√£o para acionar a previs√£o
    if st.button("Classificar"):
        prediction = model.predict(input_df)
        proba = model.predict_proba(input_df)
        st.success(f"Resultado previsto (CDR): {prediction[0]}")

with tab_pca:

    def preprocess_data(data):
        dados_pca = data[['M/F', 'Age', 'MMSE', 'ASF', 'nWBV', 'CDR']].copy()
        dados_pca['M/F'] = dados_pca['M/F'].map({'M': 0, 'F': 1})
        return dados_pca
    
    # Aplicar PCA
    def apply_pca(dados_pca):
        dados_normalizados = (dados_pca - dados_pca.mean()) / dados_pca.std()
        pca_3d = PCA(n_components=3)
        pca_resultado = pca_3d.fit_transform(dados_normalizados)
        return pd.DataFrame(data=pca_resultado, columns=['PC1', 'PC2', 'PC3'])

    # Aplicar KMeans
    def apply_kmeans(pca_df, n_clusters=4):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        labels = kmeans.fit_predict(pca_df)
        pca_df['Cluster'] = labels
        return pca_df

    # Fun√ß√£o para criar gr√°ficos
    def plot_3d_scatter(pca_df):
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(pca_df['PC1'], pca_df['PC2'], pca_df['PC3'], s=50, alpha=0.6, c=pca_df['Cluster'])
        ax.set_xlabel('PC1')
        ax.set_ylabel('PC2')
        ax.set_zlabel('PC3')
        ax.set_title('PCA - Visualiza√ß√£o 3D')
        return fig

    def plot_boxplots(dados_pca, pca_df):
        colunas = ['Age', 'MMSE', 'ASF', 'nWBV', 'CDR']
        fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20, 10))
        axes = axes.flatten()
        dados_pca['Cluster'] = pca_df['Cluster'].values
        for i, coluna in enumerate(colunas):
            sns.boxplot(x='Cluster', y=coluna, data=dados_pca, ax=axes[i])
            axes[i].set_title(f'Distribui√ß√£o de {coluna} por Cluster')
        plt.tight_layout()
        return fig

    st.title("Dashboard PCA e KMeans")

    st.subheader("An√°lise de Componentes Principais (PCA) e KMeans")

    data_pca = load_data()
    dados_pca = preprocess_data(data_pca)
    pca_df = apply_pca(dados_pca)
    cluster_pca_df = apply_kmeans(pca_df)

    # Exibir visualiza√ß√µes
    st.pyplot(plot_3d_scatter(cluster_pca_df))
    st.pyplot(plot_boxplots(dados_pca, cluster_pca_df))


with tab_simulacao:

    # Fun√ß√£o para carregar e preprocessar os dados de simula√ß√£o
    @st.cache_data
    def load_data_simulacao():
        data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
        data = data.dropna(subset=['MMSE', 'CDR']).drop('Delay', axis=1)
        return data

    # Fun√ß√£o para preparar as tabelas de distribui√ß√£o de CDR por faixa et√°ria
    def preprocess_cdr_tables(data_simulacao):
        data_simulacao_idades_cdr = data_simulacao[['Age', 'CDR']].dropna().reset_index(drop=True)

        # Filtrar apenas idades 65+
        data_65_plus = data_simulacao_idades_cdr[data_simulacao_idades_cdr['Age'] >= 65].copy()

        # Criar faixas et√°rias
        bins_65_plus = [65, 70, 75, 80, 85, 90, float('inf')]
        labels_65_plus = ['65-69', '70-74', '75-79', '80-84', '85-89', '90+']
        data_65_plus['faixa_etaria'] = pd.cut(data_65_plus['Age'], bins=bins_65_plus, labels=labels_65_plus, right=False)

        # Criar tabela agrupada por faixa et√°ria e CDR
        cdr_faixa_table = data_65_plus.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        cdr_faixa_table = cdr_faixa_table.pivot(index='faixa_etaria', columns='CDR', values='Count').fillna(0)

        # Filtrar idades >= 60 e CDR > 0
        data_cdr_pos = data_simulacao_idades_cdr[(data_simulacao_idades_cdr['Age'] >= 60) & (data_simulacao_idades_cdr['CDR'] > 0)].copy()

        # Criar faixas et√°rias ajustadas
        bins_cdr_pos = [60, 70, 80, 90, float('inf')]
        labels_cdr_pos = ['60-69', '70-79', '80-89', '90+']
        data_cdr_pos['faixa_etaria'] = pd.cut(data_cdr_pos['Age'], bins=bins_cdr_pos, labels=labels_cdr_pos, right=False)

        # Criar tabela de porcentagem por faixa et√°ria e CDR
        cdr_faixa_count = data_cdr_pos.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        total_por_faixa = cdr_faixa_count.groupby('faixa_etaria', observed=True)['Count'].transform('sum')
        cdr_faixa_count['Percent'] = (cdr_faixa_count['Count'] / total_por_faixa) * 100
        cdr_faixa_percent_table = cdr_faixa_count.pivot(index='faixa_etaria', columns='CDR', values='Percent').fillna(0)

        return cdr_faixa_table, cdr_faixa_percent_table

    # Fun√ß√£o para calcular a proje√ß√£o de Alzheimer
    def calcular_projecao_alzheimer():
        populacao_df = pd.read_csv("arquivos/populacao_idosos_2024_2040.csv")
        alzheimer_df = pd.read_csv("arquivos/alzheimer_por_faixa_etaria.csv")

        populacao_long = populacao_df.melt(id_vars="faixa_etaria", var_name="Ano", value_name="Populacao")
        populacao_long = populacao_long.merge(alzheimer_df, on="faixa_etaria")
        populacao_long["Alzheimer_Projecao"] = populacao_long["Populacao"] * (populacao_long["Alzheimer (%)"] / 100)
        populacao_long["Ano"] = populacao_long["Ano"].astype(int)

        return populacao_long

    # Fun√ß√£o para visualizar proje√ß√£o de Alzheimer
    def plot_alzheimer_projection(populacao_long):
        plt.figure(figsize=(12, 6))
        sns.lineplot(data=populacao_long, x="Ano", y="Alzheimer_Projecao", hue="faixa_etaria", marker="o")
        plt.title("Proje√ß√£o de Pessoas com Alzheimer por Faixa Et√°ria (2024‚Äì2040)")
        plt.xlabel("Ano")
        plt.ylabel("N√∫mero Estimado de Pessoas com Alzheimer")
        plt.legend(title="Faixa Et√°ria", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()
        st.pyplot(plt)

    # Fun√ß√£o para calcular proje√ß√£o por CDR
    def calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table):
        alz_idade_ano = populacao_long[['Ano', 'faixa_etaria', 'Alzheimer_Projecao']].copy()

        alz_idade_ano["faixa_etaria_ajustada"] = alz_idade_ano["faixa_etaria"].replace({
            "65-69": "60-69", "70-74": "70-79", "75-79": "70-79",
            "80-84": "80-89", "85-89": "80-89", "90+": "90+"
        })

        df_final = alz_idade_ano.merge(cdr_faixa_percent_table, left_on="faixa_etaria_ajustada", right_on="faixa_etaria", how="left")

        for cdr in [0.5, 1.0, 2.0]:
            df_final[f"CDR {cdr} Projecao"] = (df_final["Alzheimer_Projecao"] * (df_final[cdr] / 100)).round(0).astype(int)

        df_agrupado = df_final.groupby("Ano")[["CDR 0.5 Projecao", "CDR 1.0 Projecao", "CDR 2.0 Projecao"]].sum()
        
        return df_agrupado

    # Fun√ß√£o para visualizar proje√ß√£o por CDR
    def plot_cdr_projection(df_agrupado):
        plt.figure(figsize=(10, 5))
        for col in ["CDR 0.5 Projecao", "CDR 1.0 Projecao", "CDR 2.0 Projecao"]:
            plt.plot(df_agrupado.index, df_agrupado[col], label=col)

        plt.xlabel("Ano")
        plt.ylabel("Quantidade de Casos")
        plt.title("Evolu√ß√£o do n√∫mero de casos de Alzheimer por gravidade")
        plt.legend()
        plt.grid()
        st.pyplot(plt)

    # Configura√ß√£o do Streamlit
    st.title("Dashboard de An√°lise de Alzheimer")

    data_simulacao = load_data_simulacao()
    cdr_faixa_table, cdr_faixa_percent_table = preprocess_cdr_tables(data_simulacao)
    populacao_long = calcular_projecao_alzheimer()
    df_agrupado = calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table)

    # Exibir o gr√°fico principal ocupando toda a largura
    st.subheader("Proje√ß√£o de Pessoas com Alzheimer")
    plot_alzheimer_projection(populacao_long)

    # Criar duas colunas abaixo do gr√°fico principal
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Evolu√ß√£o do N√∫mero de Casos por Gravidade")
        plot_cdr_projection(df_agrupado)

    with col2:
        st.subheader("Tabela de Proje√ß√£o por CDR")
        st.write(df_agrupado)

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import joblib

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans






# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Meu Dashboard Anal√≠tico",
    page_icon="üìä",
    layout="wide"
)

st.markdown(
    """
    <style>
        .stApp {
            background-color: #f0f0f0;  /* Cor de fundo cinza claro */
        }
    </style>
    """, 
    unsafe_allow_html=True
)

# Carregar os dados
@st.cache_data
def load_data():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    return data

data = load_data()

@st.cache_data
def load_data2():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    # Filtrar os dados onde MMSE e CDR n√£o s√£o nulos
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    data["CDR"] = data["CDR"].astype(str)

    return data

data2 = load_data2()








# Criando as abas
title, tab1,  estudo, tab2, tab3, tab4, tab_pred, tab_pca = st.tabs(["-", "üìå Introdu√ß√£o ao Problema", "Estudo",  
                                                  "üìä Introdu√ß√£o aos Dados", "üìà An√°lises", "Conclus√µes",
                                                  "Predi√ß√µes", "PCA e Agrupamento"])

with title:
    st.markdown(
        """
        <h1 style="text-align: center; font-size: 40px; color: #0073e6;">
            An√°lise de Alzheimer: Diagn√≥stico e Tend√™ncias
        </h1>
        """,
        unsafe_allow_html=True
    )
    col1, col2, col3 = st.columns([1, 1, 1])

    with col2:
        st.image("image_title.webp", use_container_width =False,  width=400)


with tab1:
    
    col1, col2 = st.columns([1, 1])

    with col1:
        
        # st.subheader("Introdu√ß√£o ao Problema")
        with st.container(border=True):  
            st.write("""
                    - A doen√ßa de Alzheimer √© uma doen√ßa cerebral degenerativa sem cura
                    - √â caracterizada por atrofia progressiva do c√≥rtex cerebral
                    - Causa perda de mem√≥ria, aumento dos d√©ficits cognitivos e potencial perda das fun√ß√µes motoras
                    - Com um diagn√≥stico precoce, a progress√£o pode ser retardada e os sintomas tratados.
            """)

            # Criando tr√™s colunas: esquerda, centralizada e direita
        col_empty1, col_img, col_empty2 = st.columns([1, 2, 3])

        with col_img:
            st.image("brain_atrophy.jpg", caption="Atrofia Cerebral", width=400)
        
    with col2:  
        # Voc√™ pode adicionar imagens, gr√°ficos ou outros elementos
        
        st.image("sinais-de-alzheimer.jpg", caption="Sinais de Alzheimer", width=500)


with estudo: 

    st.subheader("Descri√ß√£o da coleta dos dados:")

    with st.container(border=True):  # Dispon√≠vel no Streamlit >= 1.29.0
            st.write("""
                    - 416 pessoas participaram do estudo;
                    - Idades entre 18 e 96 anos;
                    - Para cada pessoa, s√£o inclu√≠das dados de resson√¢ncias magn√©ticas individuais, obtidas em sess√µes de varredura √∫nica;
                    - Todos destros;
                    - Inclui homens e mulheres;
                    - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes fotografados em uma visita subsequente dentro de 90 dias de sua sess√£o inicial.
            """)

with tab2:

    
    # st.header("Introdu√ß√£o aos Dados")
    
    # Criando duas colunas (a primeira ser√° mais larga para a imagem)
    col1, col2 = st.columns([1, 1])  # Propor√ß√£o 2:3 (ajuste conforme necess√°rio)
    
    

    with col1:
        info_variaveis_ = {
        "Vari√°vel": ["ID", "M/F", "Hand", "Age", "Educ", "SES", "eTIV", "ASF", "nWBV",  "MMSE", "CDR"],
        "Defini√ß√£o": [
            "Identification", "Gender", "Dominant Hand", "Age in years", 
            "Education Level", "Socioeconomic Status", 
            "Estimated Total Intracranial Volume",
            "Atlas Scaling Factor",
            "Normalize Whole Brain Volume",
            "Mini Mental State Examination",  
            "Clinical Dementia Rating"
        ],
        "Valores": [
            " ", "M = Male, F = Female", "R = Right, L = Left", " ", 
            "1 = < Ensino M√©dio\n2 = Ensino M√©dio Completo\n3 = Ensino Superior Incompleto\n4 = Ensino Superior Completo\n5 = P√≥s-Gradua√ß√£o",
            "1 = Classe Baixa\n2 = Classe M√©dia Baixa\n3 = Classe M√©dia\n4 = Classe M√©dia Alta\n5 = Classe Alta",
            
            
            " ", " ", " ", " 0 - 30 ", 
            "0 = Sem Dem√™ncia\n0.5 = Dem√™ncia Muito Leve\n1 = Dem√™ncia Leve\n2 = Dem√™ncia Moderada",
        ]
        }
        info_variaveis = pd.DataFrame(info_variaveis_)
        st.subheader("Tabela de Vari√°veis")
        # st.dataframe(info_variaveis, use_container_width=True,hide_index=True)
        st.markdown(
            """
            <style>
            table {
                width: 80%;
                
            }
            th {
                color: #0073e6 !important; /* For√ßa a mudan√ßa da cor */
                font-weight: bold; /* Deixa o texto em negrito */
                white-space: nowrap; /* Mant√©m o texto em uma linha */
                border: 1px solid black !important;
            }
            td {
                white-space: pre-wrap;
                border: 1px solid black !important;
            }
            </style>
            """,
            unsafe_allow_html=True
            )
        
        st.table(info_variaveis)  

    with col2:
        st.subheader("Exemplo de Mini Mental State Examination")

        st.image("mmse.jpg", use_container_width=False, width=800)

with tab3:
    
    # st.header("An√°lise de Correla√ß√£o")

    subtab1, subtab2, subtab3, subtab4 = st.tabs(["Distribui√ß√£o de CDR", "An√°lise de Correla√ß√£o", "vWBV vs CDR", "MMSE vs CDR"])
    
    

    with subtab1:

        col1, col2 = st.columns([2, 1])
        
        with col1:
            cdr_table = data.groupby(['CDR']).size().reset_index(name='Count')
            
            cdr_descricao = {
                    0.0: 'Sem dem√™ncia',
                    0.5: 'Dem√™ncia muito leve',
                    1.0: 'Dem√™ncia leve',
                    2.0: 'Dem√™ncia moderada'
                }

                        # Substituir os valores da coluna CDR
            cdr_table['Interpreta√ß√£o'] = cdr_table['CDR'].map(cdr_descricao)

            cdr_table = cdr_table[['CDR','Interpreta√ß√£o','Count']]

            #st.dataframe(
            #        cdr_table.style
            #        .background_gradient(cmap='Blues', subset=['Count'])
            #        .format({'Count': '{:,}', 'CDR': '{:.1f}'}),  # Formata n√∫meros com separador de milhar
            #        use_container_width=False,  # N√£o usar toda a largura
            #        hide_index=True
            #    )
        
            plt.figure(figsize=(4, 2))
            ax = sns.barplot(x='Count', y='Interpreta√ß√£o', data=cdr_table, hue='Interpreta√ß√£o', palette='viridis', dodge=False)

            # Adicionando os valores de contagem no final de cada barra
            for index, row in cdr_table.iterrows():
                ax.text(row['Count'] + 1, index, str(row['Count']), color='black', va='center')

            # Remover as bordas do gr√°fico
            for spine in ax.spines.values():
                spine.set_visible(False)

            # Adicionando t√≠tulos e r√≥tulos
            plt.title('Distribui√ß√£o de Casos por Tipo de Dem√™ncia')
            plt.xlabel('Contagem')
            plt.ylabel('Tipo de Dem√™ncia')

            # Exibindo o gr√°fico no Streamlit
            st.pyplot(plt, use_container_width=False)
        
        with col2:
            st.markdown("""
            - 100 dos sujeitos inclu√≠dos com mais de 60 anos foram clinicamente diagnosticados com doen√ßa de Alzheimer muito leve a moderada.
            - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes.
            """)
        

    with subtab2:
    
        # Criar duas colunas (1:2 - a figura ocupar√° 1/3 do espa√ßo)
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Cria a figura menor
            fig, ax = plt.subplots(figsize=(5, 3))  # Tamanho reduzido
            corr_spearman = data.corr(method='spearman', numeric_only=True)
            mask = np.triu(np.ones_like(corr_spearman, dtype=bool))
            
            sns.heatmap(
                corr_spearman,
                mask=mask,
                annot=True,
                fmt=".2f",
                cmap='coolwarm',
                center=0,
                vmin=-1,
                vmax=1,
                cbar_kws={"shrink": 0.6},
                ax=ax,
                annot_kws={"size": 6} 
            )
            
            # Ajustar fonte da colorbar
            cbar = ax.collections[0].colorbar
            cbar.ax.tick_params(labelsize=6) 

            ax.set_title("Correla√ß√£o (Spearman)", fontsize=10)
            plt.xticks(rotation=45, fontsize=6)
            plt.yticks(rotation=0, fontsize=6)
            plt.tight_layout()
            
            st.pyplot(fig, use_container_width=False)
        
        with col2:
            st.markdown("""
            **Mapa de Correla√ß√£o de Spearman**
            
            Este gr√°fico mostra as rela√ß√µes entre as vari√°veis num√©ricas:
            
            - **Correla√ß√£o Positiva (+1)**
            - **Correla√ß√£o Negativa (-1)**
            - **Sem Correla√ß√£o (0)**
            """)

    with subtab3:

        fig2 = px.scatter(
        data2,
        x='Age',
        y='nWBV',
        color='CDR',
        size='eTIV',
        hover_name='ID',
        title='Volume Cerebral Normalizado por Idade e CDR',
        labels={'Age': 'Idade', 'nWBV': 'Volume Cerebral Normalizado', 'CDR': 'CDR'},
        color_discrete_sequence=['#6baed6', '#1f78b4', '#fb9a99', '#e31a1c']  
    )
        st.plotly_chart(fig2, use_container_width=True)

    with subtab4:
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            custom_colors = ['#6baed6', '#1f78b4', '#fb9a99', '#e31a1c']   # Azul claro, azul escuro, vermelho claro, vermelho escuro

            # Criando o gr√°fico
            fig5 = px.histogram(
                data,
                x='MMSE',
                color='CDR',
                nbins=20,
                title='Distribui√ß√£o do MMSE por CDR',
                labels={'MMSE': 'Pontua√ß√£o MMSE', 'CDR': 'CDR'},
                color_discrete_sequence=custom_colors  # Usando a paleta de cores personalizada
            )

            st.plotly_chart(fig5, use_container_width=False)

        with col2:
            with st.container(border=True): 
                st.markdown("""
                Temos que 82% dos pacientes considerados obtiveram resultado superior a 23 no MMSE, 
                onde 70% deles apresentaram um CDR = 0 e um 27% apresentaram CDR = 0.5. 
                E 100% dos pacientes com CDR = 0 obtiveram resultado superior a 23.
                """)
with tab4:
      st.subheader("Conclus√µes")

      with st.container(border=True): 
                st.markdown("""
                - Neste estudo, √© um exemplo de que baixos resultados no MMSE s√£o um sinal de alerta para poss√≠veis casos de dem√™ncia.

                - Pode-se considerar realizar o MMSE a partir dos 60 anos.

                - Exames de imagem s√£o recomendados para fornecer uma conclus√£o ap√≥s os resultados do MMSE.
                """)

with tab_pred:
    # Carregar o modelo salvo
    model = joblib.load('decision_tree_model.pkl')

    # T√≠tulo do app
    st.title("Classifica√ß√£o de Dem√™ncia (CDR)")

    st.subheader("Preencha os dados do paciente:")

    # Layout em duas colunas
    col1, col2 = st.columns(2)

    with col1:
        gender = st.selectbox("Sexo (M/F)", ['M', 'F'])
        educ = st.selectbox("N√≠vel educacional", [1, 2, 3, 4, 5])
        age = st.number_input("Idade", min_value=0, max_value=120, value=75)
        etiv = st.number_input("Volume Total Intracraniano Estimado", value=1500.0)

    with col2:
        ses = st.selectbox("Status socioecon√¥mico", [1, 2, 3, 4, 5])
        mmse = st.number_input("Mini-Exame do Estado Mental", min_value=0, max_value=30, value=28)
        nwbv = st.number_input("Volume Normalizado de Mat√©ria Branca", value=0.75)

    # Montar DataFrame com os dados inseridos
    input_df = pd.DataFrame({
        'M/F': [gender],
        'Educ': [educ],
        'SES': [ses],
        'Age': [age],
        'MMSE': [mmse],
        'eTIV': [etiv],
        'nWBV': [nwbv]
    })

    # Bot√£o para acionar a previs√£o
    if st.button("Classificar"):
        prediction = model.predict(input_df)
        proba = model.predict_proba(input_df)
        st.success(f"Resultado previsto (CDR): {prediction[0]}")

with tab_pca:

    def preprocess_data(data):
        dados_pca = data[['M/F', 'Age', 'MMSE', 'ASF', 'nWBV', 'CDR']].copy()
        dados_pca['M/F'] = dados_pca['M/F'].map({'M': 0, 'F': 1})
        return dados_pca
    
    # Aplicar PCA
    def apply_pca(dados_pca):
        dados_normalizados = (dados_pca - dados_pca.mean()) / dados_pca.std()
        pca_3d = PCA(n_components=3)
        pca_resultado = pca_3d.fit_transform(dados_normalizados)
        return pd.DataFrame(data=pca_resultado, columns=['PC1', 'PC2', 'PC3'])

    # Aplicar KMeans
    def apply_kmeans(pca_df, n_clusters=4):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        labels = kmeans.fit_predict(pca_df)
        pca_df['Cluster'] = labels
        return pca_df

    # Fun√ß√£o para criar gr√°ficos
    def plot_3d_scatter(pca_df):
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(pca_df['PC1'], pca_df['PC2'], pca_df['PC3'], s=50, alpha=0.6, c=pca_df['Cluster'])
        ax.set_xlabel('PC1')
        ax.set_ylabel('PC2')
        ax.set_zlabel('PC3')
        ax.set_title('PCA - Visualiza√ß√£o 3D')
        return fig

    def plot_boxplots(dados_pca, pca_df):
        colunas = ['Age', 'MMSE', 'ASF', 'nWBV', 'CDR']
        fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20, 10))
        axes = axes.flatten()
        dados_pca['Cluster'] = pca_df['Cluster'].values
        for i, coluna in enumerate(colunas):
            sns.boxplot(x='Cluster', y=coluna, data=dados_pca, ax=axes[i])
            axes[i].set_title(f'Distribui√ß√£o de {coluna} por Cluster')
        plt.tight_layout()
        return fig

    st.title("Dashboard PCA e KMeans")

    st.subheader("An√°lise de Componentes Principais (PCA) e KMeans")

    data_pca = load_data()
    dados_pca = preprocess_data(data_pca)
    pca_df = apply_pca(dados_pca)
    cluster_pca_df = apply_kmeans(pca_df)

    # Exibir visualiza√ß√µes
    st.pyplot(plot_3d_scatter(cluster_pca_df))
    st.pyplot(plot_boxplots(dados_pca, cluster_pca_df))

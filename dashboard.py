import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import joblib

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

from scipy.stats import shapiro, ttest_ind, mannwhitneyu





# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Meu Dashboard Anal√≠tico",
    page_icon="üìä",
    layout="wide"
)

st.markdown(
    """
    <style>
        .stApp {
            background-color: #f0f0f0;  /* Cor de fundo cinza claro */
        }
    </style>
    """, 
    unsafe_allow_html=True
)

# Carregar os dados
@st.cache_data
def load_data():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    return data

data = load_data()

@st.cache_data
def load_data2():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    # Filtrar os dados onde MMSE e CDR n√£o s√£o nulos
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    data["CDR"] = data["CDR"].astype(str)

    return data

data2 = load_data2()








# Criando as abas
tab_title, tab_intro_problema,  tab_estudo, tab_intro_dados, tab_analises, tab_pred, tab_pca, tab_simulacao, tab_conclusoes = st.tabs(["-", "üìå Introdu√ß√£o ao Problema", "Estudo",  
                                                  "üìä Introdu√ß√£o aos Dados", "üìà An√°lises",
                                                  "Predi√ß√µes", "PCA e Agrupamento", "Simula√ß√µes",
                                                  "Conclus√µes"])

with tab_title:
    st.markdown(
        """
        <h1 style="text-align: center; font-size: 40px; color: #0073e6;">
            An√°lise de Alzheimer: Diagn√≥stico e Tend√™ncias
        </h1>
        """,
        unsafe_allow_html=True
    )
    col1, col2, col3 = st.columns([1, 1, 1])

    with col2:
        st.image("image_title.webp", use_container_width =False,  width=400)


with tab_intro_problema:
    
    col1, col2 = st.columns([1, 1])

    with col1:
        
        # st.subheader("Introdu√ß√£o ao Problema")
        with st.container(border=True):  
            st.write("""
                    - A doen√ßa de Alzheimer √© uma doen√ßa cerebral degenerativa sem cura
                    - √â caracterizada por atrofia progressiva do c√≥rtex cerebral
                    - Causa perda de mem√≥ria, aumento dos d√©ficits cognitivos e potencial perda das fun√ß√µes motoras
                    - Com um diagn√≥stico precoce, a progress√£o pode ser retardada e os sintomas tratados.
            """)

            # Criando tr√™s colunas: esquerda, centralizada e direita
        col_empty1, col_img, col_empty2 = st.columns([1, 2, 3])

        with col_img:
            st.image("brain_atrophy.jpg", caption="Atrofia Cerebral", width=400)
        
    with col2:  
        # Voc√™ pode adicionar imagens, gr√°ficos ou outros elementos
        
        st.image("sinais-de-alzheimer.jpg", caption="Sinais de Alzheimer", width=500)


with tab_estudo: 

    st.subheader("Descri√ß√£o da coleta dos dados:")

    with st.container(border=True):  # Dispon√≠vel no Streamlit >= 1.29.0
            st.write("""
                    - 416 pessoas participaram do estudo;
                    - Idades entre 18 e 96 anos;
                    - Para cada pessoa, s√£o inclu√≠das dados de resson√¢ncias magn√©ticas individuais, obtidas em sess√µes de varredura √∫nica;
                    - Todos destros;
                    - Inclui homens e mulheres;
                    - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes fotografados em uma visita subsequente dentro de 90 dias de sua sess√£o inicial.
            """)

with tab_intro_dados:

    
    # st.header("Introdu√ß√£o aos Dados")
    
    # Criando duas colunas (a primeira ser√° mais larga para a imagem)
    col1, col2 = st.columns([1, 1])  # Propor√ß√£o 2:3 (ajuste conforme necess√°rio)
    
    

    with col1:
        info_variaveis_ = {
            "Vari√°vel": ["ID", "M/F", "M√£o", "Idade", "Educ", "NSE", "eTIV", "ASF", "nWBV", "MMSE", "CDR"],
            "Defini√ß√£o": [
                "Identifica√ß√£o", "G√™nero", "M√£o Dominante", "Idade em anos", 
                "N√≠vel de Educa√ß√£o", "N√≠vel Socioecon√¥mico", 
                "Volume Intracraniano Total Estimado",
                "Fator de Escala Atlas",
                "Volume Cerebral Total Normalizado",
                "Mini Exame do Estado Mental",  
                "Escala Cl√≠nica de Dem√™ncia"
            ],
            "Valores": [
                " ", "M = Masculino, F = Feminino", "R = Direita, L = Esquerda", " ", 
                "1 = < Ensino M√©dio\n2 = Ensino M√©dio Completo\n3 = Ensino Superior Incompleto\n4 = Ensino Superior Completo\n5 = P√≥s-Gradua√ß√£o",
                "1 = Classe Baixa\n2 = Classe M√©dia Baixa\n3 = Classe M√©dia\n4 = Classe M√©dia Alta\n5 = Classe Alta",
                " ", " ", " ", " 0 - 30 ", 
                "0 = Sem Dem√™ncia\n0.5 = Dem√™ncia Muito Leve\n1 = Dem√™ncia Leve\n2 = Dem√™ncia Moderada",
            ]
        }
        info_variaveis = pd.DataFrame(info_variaveis_)
        st.subheader("Tabela de Vari√°veis")
        # st.dataframe(info_variaveis, use_container_width=True,hide_index=True)
        st.markdown(
            """
            <style>
            table {
                width: 80%;
                
            }
            th {
                color: #0073e6 !important; /* For√ßa a mudan√ßa da cor */
                font-weight: bold; /* Deixa o texto em negrito */
                white-space: nowrap; /* Mant√©m o texto em uma linha */
                border: 1px solid black !important;
            }
            td {
                white-space: pre-wrap;
                border: 1px solid black !important;
            }
            </style>
            """,
            unsafe_allow_html=True
            )
        
        st.table(info_variaveis)  

    with col2:
        st.subheader("Exemplo de Mini Mental State Examination")

        st.image("mmse.jpg", use_container_width=False, width=800)

with tab_analises:
    
    # st.header("An√°lise de Correla√ß√£o")

    subtab1, subtab2, subtab3, subtab4 = st.tabs(["Distribui√ß√£o de CDR", "An√°lise de Correla√ß√£o", "nWBV vs CDR", "MMSE vs CDR"])
    
    

    with subtab1:

        col1, col2 = st.columns([2, 1])
        
        with col1:
            cdr_table = data.groupby(['CDR']).size().reset_index(name='Count')
            
            cdr_descricao = {
                0.0: 'Sem dem√™ncia',
                0.5: 'Dem√™ncia muito leve',
                1.0: 'Dem√™ncia leve',
                2.0: 'Dem√™ncia moderada'
            }

            # Substituir os valores da coluna CDR
            cdr_table['Interpreta√ß√£o'] = cdr_table['CDR'].map(cdr_descricao)
            cdr_table = cdr_table[['CDR','Interpreta√ß√£o','Count']]

            # Definir a paleta de cores personalizada
            cores_personalizadas = {
                0.0: '#4daf4a',  # Verde intermedi√°rio
                0.5: '#ff9999',  # Vermelho leve
                1.0: '#e41a1c',  # Vermelho intermedi√°rio
                2.0: '#990000'   # Vermelho intenso
            }

            # Mapear as cores para cada interpreta√ß√£o
            cdr_table['Cor'] = cdr_table['CDR'].map(cores_personalizadas)

            plt.figure(figsize=(4, 2))
            ax = sns.barplot(
                x='Count', 
                y='Interpreta√ß√£o', 
                data=cdr_table, 
                hue='Interpreta√ß√£o', 
                palette=cdr_table['Cor'].tolist(),  # Usar a lista de cores personalizadas
                dodge=False
            )

            # Adicionando os valores de contagem no final de cada barra
            for index, row in cdr_table.iterrows():
                ax.text(row['Count'] + 1, index, str(row['Count']), color='black', va='center')

            # Remover as bordas do gr√°fico
            for spine in ax.spines.values():
                spine.set_visible(False)

            # Adicionando t√≠tulos e r√≥tulos
            plt.title('Distribui√ß√£o de Casos por Tipo de Dem√™ncia')
            plt.xlabel('N√∫mero de Casos')
            plt.ylabel('Tipo de Dem√™ncia')

            # Remover a legenda de cores (opcional, j√° que os r√≥tulos est√£o no eixo Y)
            # ax.legend_.remove()

            # Exibindo o gr√°fico no Streamlit
            st.pyplot(plt, use_container_width=False)
        
        with col2:
            st.markdown("""
            - 100 dos sujeitos inclu√≠dos com mais de 60 anos foram clinicamente diagnosticados com doen√ßa de Alzheimer muito leve a moderada.
                        """)
        

    with subtab2:
    
        # Criar duas colunas (1:2 - a figura ocupar√° 1/3 do espa√ßo)
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Cria a figura menor
            fig, ax = plt.subplots(figsize=(5, 3))  # Tamanho reduzido
            corr_spearman = data.corr(method='spearman', numeric_only=True)
            mask = np.triu(np.ones_like(corr_spearman, dtype=bool))
            
            sns.heatmap(
                corr_spearman,
                mask=mask,
                annot=True,
                fmt=".2f",
                cmap='coolwarm',
                center=0,
                vmin=-1,
                vmax=1,
                cbar_kws={"shrink": 0.6},
                ax=ax,
                annot_kws={"size": 6} 
            )
            
            # Ajustar fonte da colorbar
            cbar = ax.collections[0].colorbar
            cbar.ax.tick_params(labelsize=6) 

            ax.set_title("Correla√ß√£o (Spearman)", fontsize=10)
            plt.xticks(rotation=45, fontsize=6)
            plt.yticks(rotation=0, fontsize=6)
            plt.tight_layout()
            
            st.pyplot(fig, use_container_width=False)
        
        with col2:
            st.markdown("""
            **Mapa de Correla√ß√£o de Spearman**
            
            Este gr√°fico mostra as rela√ß√µes entre as vari√°veis num√©ricas:
            
            - **Correla√ß√£o Positiva (+1)**
            - **Correla√ß√£o Negativa (-1)**
            - **Sem Correla√ß√£o (0)**
            """)

    with subtab3:

        st.title("An√°lise Estat√≠stica de nWBV entre Pacientes com e sem Dem√™ncia")

        fig2 = px.scatter(
        data,
        x='Age',
        y='nWBV',
        color='CDR',
        hover_name='ID',
        title='Volume Cerebral Normalizado por Idade e CDR',
        labels={'Age': 'Idade', 'nWBV': 'Volume Cerebral Normalizado', 'CDR': 'CDR'},
        color_discrete_sequence=['#4daf4a', '#ff9999', '#e41a1c', '#990000']  
    )
        st.plotly_chart(fig2, use_container_width=True)

        nwbv_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR'] >0), ['nWBV']].reset_index(drop=True)
        nwbv_nao_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR']  == 0), ['nWBV']]

        def cohens_d(x, y):
            nx = len(x)
            ny = len(y)
            dof = nx + ny - 2
            pooled_std = np.sqrt(((nx-1)*np.std(x, ddof=1)**2 + (ny-1)*np.std(y, ddof=1)**2) / dof)
            return (np.mean(x) - np.mean(y)) / pooled_std
    
        st.header("Distribui√ß√£o do Volume Cerebral Total Normalizado")
    
        # Definir paleta de cores
        cor_nao_doentes = '#4daf4a'  # Verde
        cor_doentes = '#ff7f00'      # Laranja intenso

        # Criar 3 colunas (a terceira ter√° o dobro do tamanho)
        col1, col2, col3 = st.columns([1, 1, 1.5])

        # Gr√°ficos de distribui√ß√£o (colunas 1 e 2)
        with col1:
            #st.subheader(" ")
            fig, ax = plt.subplots(figsize=(4, 3))
            sns.histplot(nwbv_doentes_maiores_60['nWBV'], kde=True, color=cor_doentes, label='CDR > 0')
            plt.title("Distribui√ß√£o - Doentes (CDR > 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        with col2:
            #st.subheader(" ")
            fig, ax = plt.subplots(figsize=(4, 3))
            sns.histplot(nwbv_nao_doentes_maiores_60['nWBV'], kde=True, color=cor_nao_doentes, label='CDR = 0')
            plt.title("Distribui√ß√£o - N√£o Doentes (CDR = 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        # Boxplot (coluna 3 - mais larga)
        with col3:
            
            fig, ax = plt.subplots(figsize=(8, 4))
            
            # Preparar os dados
            nwbv_doentes_maiores_60['Grupo'] = 'CDR > 0'
            nwbv_nao_doentes_maiores_60['Grupo'] = 'CDR = 0'
            dados_comparacao = pd.concat([nwbv_doentes_maiores_60, nwbv_nao_doentes_maiores_60])
            
            # Criar o boxplot com a nova paleta
            sns.boxplot(x='Grupo', y='nWBV', data=dados_comparacao,
                        hue='Grupo', 
                        palette={'CDR > 0': cor_doentes, 'CDR = 0': cor_nao_doentes},
                        order=['CDR > 0', 'CDR = 0'],
                        legend=False)
            
            plt.title("Compara√ß√£o de nWBV: Doentes vs N√£o Doentes")
            plt.ylabel("nWBV")
            plt.xlabel("")
            st.pyplot(fig)


        # Se√ß√£o 2: Testes de Normalidade
        st.header("Testes de Normalidade (Shapiro-Wilk)")

        # Container com largura reduzida para o slider
        with st.container():
            col_slider, _ = st.columns([0.4, 0.6])  # Slider ocupar√° apenas 40% da largura
            
            with col_slider:
                alpha1 = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                                min_value=0.01, 
                                max_value=0.10, 
                                value=0.05, 
                                step=0.01,
                                help="N√≠vel de signific√¢ncia para os testes estat√≠sticos",
                                key="alpha_nwbv")

        # Realizar os testes
        stat_doentes, p_doentes = shapiro(nwbv_doentes_maiores_60['nWBV'])
        stat_nao_doentes, p_nao_doentes = shapiro(nwbv_nao_doentes_maiores_60['nWBV'])

        # Exibir resultados em colunas
        norm_col1, norm_col2 = st.columns(2)

        with norm_col1:
            # Card expandido para Doentes
            with st.expander("**Doentes (CDR > 0)**", expanded=True):
                st.markdown(f"""
                - **Estat√≠stica do teste:** {stat_doentes:.4f}
                - **Valor-p:** {p_doentes:.4f}
                - **Œ± selecionado:** {alpha1}
                """)
                st.markdown(f"#### Conclus√£o: {'Normal' if p_doentes > alpha1 else 'N√£o normal'}")

        with norm_col2:
            # Card expandido para N√£o Doentes
            with st.expander("**N√£o Doentes (CDR = 0)**", expanded=True):
                st.markdown(f"""
                - **Estat√≠stica do teste:** {stat_nao_doentes:.4f}
                - **Valor-p:** {p_nao_doentes:.4f}
                - **Œ± selecionado:** {alpha1}
                """)
                st.markdown(f"#### Conclus√£o: {'Normal' if p_nao_doentes > alpha1 else 'N√£o normal'}")
        
        # Se√ß√£o 3: Teste T e Tamanho do Efeito
        st.header("Compara√ß√£o entre Grupos")

        # C√°lculos estat√≠sticos
        t_stat, p_valor = ttest_ind(
            nwbv_doentes_maiores_60['nWBV'],
            nwbv_nao_doentes_maiores_60['nWBV'],
            alternative='less'
        )

        d = cohens_d(nwbv_doentes_maiores_60['nWBV'], nwbv_nao_doentes_maiores_60['nWBV'])

        # Layout em duas colunas
        col_t, col_d = st.columns(2)

        # Coluna 1 - Teste T
        with col_t:
            st.subheader("Teste T para Amostras Independentes")
            
            with st.expander("Hip√≥teses", expanded=True):
                st.markdown("""
                - **H‚ÇÄ (Nula):** Œº‚ÇÅ ‚â• Œº‚ÇÇ (Doentes t√™m nWBV maior/igual)
                - **H‚ÇÅ (Alternativa):** Œº‚ÇÅ < Œº‚ÇÇ (Doentes t√™m nWBV menor)
                """)
            
            st.markdown(f"""
            **Resultados:**
            - Estat√≠stica t = `{t_stat:.4f}`
            - Graus de liberdade = `{len(nwbv_doentes_maiores_60) + len(nwbv_nao_doentes_maiores_60) - 2}`
            """)
            
            st.metric(label="Valor-p", 
                    value=f"{p_valor:.4f}",
                    delta="Significativo" if p_valor < alpha1 else "N√£o significativo",
                    delta_color="inverse")
            
            st.markdown(f"""
            ### Conclus√£o do Teste T
            {'‚úÖ **Rejeitamos H‚ÇÄ** (p < Œ±)' if p_valor < alpha1 else '‚ùå **N√£o rejeitamos H‚ÇÄ** (p ‚â• Œ±)'}  
            Œ± = {alpha1}
            """)

        # Coluna 2 - Tamanho do Efeito
        with col_d:
            st.subheader("Tamanho do Efeito (Cohen's d)")
            
            st.markdown(f"""
            **Valor calculado:**  
            `d = {d:.2f}`
            """)
            
            st.markdown("""
            **Escala de refer√™ncia:**
            | d    | Interpreta√ß√£o |
            |------|---------------|
            | 0.2  | Pequeno       |
            | 0.5  | M√©dio         |
            | 0.8  | Grande        |
            """)
            
            # Determinar interpreta√ß√£o
            abs_d = abs(d)
            if abs_d >= 0.8:
                interpretacao = "**Grande efeito** üü†"
            elif abs_d >= 0.5:
                interpretacao = "**M√©dio efeito** üü°"
            else:
                interpretacao = "**Pequeno efeito** üü¢"
            
            st.markdown(f"""
            ### Interpreta√ß√£o
            {interpretacao}  
            Dire√ß√£o: {'Negativo' if d < 0 else 'Positivo'}
            """)


    with subtab4:
        st.header("An√°lise Comparativa Exame Mental entre Pacientes com e sem Dem√™ncia")
        
        # =============================================
        # Se√ß√£o 1: Visualiza√ß√£o dos Dados
        # =============================================
        
        # Criar duas colunas para os gr√°ficos
        col_graph1, col_graph2 = st.columns(2)
        
        with col_graph1:
            # Gr√°fico de Strip
            custom_colors = ['#4daf4a', '#ff9999', '#e41a1c', '#990000']   
            fig_strip = px.strip(
                data2,
                y='MMSE',
                x='CDR',
                color='CDR',
                stripmode='overlay',
                title='Distribui√ß√£o Individual de Pontua√ß√µes do Exame Mental ',
                labels={'MMSE': 'Pontua√ß√£o Exame Mental ', 'CDR': 'Grau de Dem√™ncia'},
                color_discrete_sequence=custom_colors
            )
            fig_strip.update_traces(jitter=0.3)
            st.plotly_chart(fig_strip, use_container_width=True)
        
        with col_graph2:
            # Gr√°fico de Boxplot
            mmse_doentes = data.loc[(data['Age'] > 60) & (data['CDR'] > 0), ['MMSE']].copy()
            mmse_nao_doentes = data.loc[(data['Age'] > 60) & (data['CDR'] == 0), ['MMSE']].copy()
            
            mmse_doentes['Grupo'] = 'CDR > 0'
            mmse_nao_doentes['Grupo'] = 'CDR = 0'
            dados_comparacao = pd.concat([mmse_doentes, mmse_nao_doentes])
            
            fig_box = px.box(
                dados_comparacao,
                x='Grupo',
                y='MMSE',
                color='Grupo',
                color_discrete_map={'CDR > 0': '#ff7f00', 'CDR = 0': '#4daf4a'},
                title='Distribui√ß√£o de Pontua√ß√£o Exame Mental  Entre Doentes e N√£o Doentes',
                labels={'MMSE': 'Pontua√ß√£o Exame Mental ', 'Grupo': 'Divis√£o por Doentes e n√£o Doentes'},       
                )
            fig_box.update_layout(showlegend=False)
            st.plotly_chart(fig_box, use_container_width=True)
        
         
        st.subheader("An√°lise Estat√≠stica")
        
        # Configura√ß√£o do teste
        with st.container():
            col_slider, _ = st.columns([0.3, 0.7])
            with col_slider:
                alpha = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                                min_value=0.01, max_value=0.10, 
                                value=0.05, step=0.01,
                                help="Limiar para decis√£o estat√≠stica",
                                key="alpha_mmse")
        
        # Layout em colunas para os testes
        col_test1, col_test2 = st.columns(2)
        
        with col_test1:
            # Teste de Normalidade
            with st.expander("Teste de Normalidade (Shapiro-Wilk)", expanded=True):
                stat_d, p_d = shapiro(mmse_doentes['MMSE'])
                stat_nd, p_nd = shapiro(mmse_nao_doentes['MMSE'])
                
                st.markdown("""
                **Hip√≥teses:**
                - H‚ÇÄ: Os dados seguem uma distribui√ß√£o normal
                - H‚ÇÅ: Os dados n√£o seguem uma distribui√ß√£o normal
                """)
                
                st.markdown(f"""
                **Resultados:**
                - **CDR > 0 (Doentes):**
                - Estat√≠stica W = `{stat_d:.4f}`, p-valor = `{p_d:.4f}`
                
                - **CDR = 0 (N√£o Doentes):**
                - Estat√≠stica W = `{stat_nd:.4f}`,  p-valor = `{p_nd:.4f}`
                """)
                
                if p_d < 0.05 or p_nd < 0.05:
                    st.warning("""
                    **Conclus√£o:**  
                    Pelo menos um grupo n√£o segue distribui√ß√£o normal (p < 0.05).  
                    Recomendado usar teste n√£o-param√©trico.
                    """)
                else:
                    st.success("""
                    **Conclus√£o:**  
                    Ambos grupos seguem distribui√ß√£o normal (p ‚â• 0.05).  
                    Pode-se usar teste param√©trico.
                    """)
        
        with col_test2:
            # Teste de Mann-Whitney
            with st.expander("Teste de Mann-Whitney U", expanded=True):
                u_stat, p_valor = mannwhitneyu(
                    mmse_doentes['MMSE'],
                    mmse_nao_doentes['MMSE'],
                    alternative='less'
                )
                
                st.markdown("""
                **Hip√≥teses:**
                - H‚ÇÄ: N√£o h√° diferen√ßa entre os grupos
                - H‚ÇÅ: CDR > 0 tem MMSE menor (teste unilateral)
                """)
                
                st.markdown(f"""
                **Resultados:**
                - Estat√≠stica U = `{u_stat:.2f}`
                - p-valor = `{p_valor:.6f}`
                """)
                
                if p_valor < alpha:
                    st.error(f"""
                    **Conclus√£o Final:**  
                    Rejeitamos H‚ÇÄ (p < {alpha})  
                    H√° evid√™ncias de que pacientes com dem√™ncia t√™m MMSE significativamente menor.
                    """)
                else:
                    st.success(f"""
                    **Conclus√£o Final:**  
                    N√£o rejeitamos H‚ÇÄ (p ‚â• {alpha})  
                    N√£o h√° evid√™ncias suficientes para afirmar diferen√ßa significativa.
                    """)
        # =============================================
        # Se√ß√£o 4: Informa√ß√µes Adicionais
        # =============================================
        with st.expander("üìå Sobre a An√°lise", expanded=False):
            st.markdown("""
            **Metodologia:**
            - Popula√ß√£o: Pacientes acima de 60 anos
            - Vari√°vel resposta: Pontua√ß√£o Exame Mental (0-30)
            - Grupos comparados: CDR = 0 vs CDR > 0
            - Testes utilizados:
            -- Shapiro-Wilk (normalidade)
            -- Mann-Whitney U (diferen√ßa entre grupos)
            
            **Interpreta√ß√£o Cl√≠nica:**
            - MMSE < 24 sugere comprometimento cognitivo
            - CDR > 0 indica algum grau de dem√™ncia
            """)


with tab_pred:
    # Carregar o modelo salvo
    model = joblib.load('decision_tree_model.pkl')

    # T√≠tulo do app
    st.title("Classifica√ß√£o de Dem√™ncia (CDR)")

    st.subheader("Preencha os dados do paciente:")

    # Layout em duas colunas
    col1, col2 = st.columns(2)

    with col1:
        gender = st.selectbox("Sexo (M/F)", ['M', 'F'])
        educ = st.selectbox("N√≠vel educacional", [1, 2, 3, 4, 5])
        age = st.number_input("Idade", min_value=0, max_value=120, value=75)
        etiv = st.number_input("Volume Total Intracraniano Estimado", value=1500.0)

    with col2:
        ses = st.selectbox("Status socioecon√¥mico", [1, 2, 3, 4, 5])
        mmse = st.number_input("Mini-Exame do Estado Mental", min_value=0, max_value=30, value=28)
        nwbv = st.number_input("Volume Normalizado de Mat√©ria Branca", value=0.75)

    # Montar DataFrame com os dados inseridos
    input_df = pd.DataFrame({
        'M/F': [gender],
        'Educ': [educ],
        'SES': [ses],
        'Age': [age],
        'MMSE': [mmse],
        'eTIV': [etiv],
        'nWBV': [nwbv]
    })

    # Bot√£o para acionar a previs√£o
    if st.button("Classificar"):
        prediction = model.predict(input_df)
        proba = model.predict_proba(input_df)
        st.success(f"Resultado previsto (CDR): {prediction[0]}")

with tab_pca:

    def preprocess_data(data):
        dados_pca = data[['M/F', 'Age', 'MMSE', 'ASF', 'nWBV', 'CDR']].copy()
        dados_pca['M/F'] = dados_pca['M/F'].map({'M': 0, 'F': 1})
        return dados_pca
    
    # Aplicar PCA
    def apply_pca(dados_pca):
        dados_normalizados = (dados_pca - dados_pca.mean()) / dados_pca.std()
        pca_3d = PCA(n_components=3)
        pca_resultado = pca_3d.fit_transform(dados_normalizados)
        return pd.DataFrame(data=pca_resultado, columns=['PC1', 'PC2', 'PC3'])

    # Aplicar KMeans
    def apply_kmeans(pca_df, n_clusters=4):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        labels = kmeans.fit_predict(pca_df)
        pca_df['Cluster'] = labels
        return pca_df

    # Fun√ß√£o para criar gr√°ficos
    def plot_3d_scatter(pca_df):
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(pca_df['PC1'], pca_df['PC2'], pca_df['PC3'], s=50, alpha=0.6, c=pca_df['Cluster'])
        ax.set_xlabel('PC1')
        ax.set_ylabel('PC2')
        ax.set_zlabel('PC3')
        ax.set_title('PCA - Visualiza√ß√£o 3D')
        return fig

    def plot_boxplots(dados_pca, pca_df):
        colunas = ['Age', 'MMSE', 'ASF', 'nWBV', 'CDR']
        fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20, 10))
        axes = axes.flatten()
        dados_pca['Cluster'] = pca_df['Cluster'].values
        for i, coluna in enumerate(colunas):
            sns.boxplot(x='Cluster', y=coluna, data=dados_pca, ax=axes[i])
            axes[i].set_title(f'Distribui√ß√£o de {coluna} por Cluster')
        plt.tight_layout()
        return fig

    st.title("Dashboard PCA e KMeans")

    st.subheader("An√°lise de Componentes Principais (PCA) e KMeans")

    data_pca = load_data()
    dados_pca = preprocess_data(data_pca)
    pca_df = apply_pca(dados_pca)
    cluster_pca_df = apply_kmeans(pca_df)

    # Exibir visualiza√ß√µes
    st.pyplot(plot_3d_scatter(cluster_pca_df))
    st.pyplot(plot_boxplots(dados_pca, cluster_pca_df))


with tab_simulacao:

    # Fun√ß√£o para carregar e preprocessar os dados de simula√ß√£o
    @st.cache_data
    def load_data_simulacao():
        data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
        data = data.dropna(subset=['MMSE', 'CDR']).drop('Delay', axis=1)
        return data

    # Fun√ß√£o para preparar as tabelas de distribui√ß√£o de CDR por faixa et√°ria
    def preprocess_cdr_tables(data_simulacao):
        data_simulacao_idades_cdr = data_simulacao[['Age', 'CDR']].dropna().reset_index(drop=True)

        # Filtrar apenas idades 65+
        data_65_plus = data_simulacao_idades_cdr[data_simulacao_idades_cdr['Age'] >= 65].copy()

        # Criar faixas et√°rias
        bins_65_plus = [65, 70, 75, 80, 85, 90, float('inf')]
        labels_65_plus = ['65-69', '70-74', '75-79', '80-84', '85-89', '90+']
        data_65_plus['faixa_etaria'] = pd.cut(data_65_plus['Age'], bins=bins_65_plus, labels=labels_65_plus, right=False)

        # Criar tabela agrupada por faixa et√°ria e CDR
        cdr_faixa_table = data_65_plus.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        cdr_faixa_table = cdr_faixa_table.pivot(index='faixa_etaria', columns='CDR', values='Count').fillna(0)

        # Filtrar idades >= 60 e CDR > 0
        data_cdr_pos = data_simulacao_idades_cdr[(data_simulacao_idades_cdr['Age'] >= 60) & (data_simulacao_idades_cdr['CDR'] > 0)].copy()

        # Criar faixas et√°rias ajustadas
        bins_cdr_pos = [60, 70, 80, 90, float('inf')]
        labels_cdr_pos = ['60-69', '70-79', '80-89', '90+']
        data_cdr_pos['faixa_etaria'] = pd.cut(data_cdr_pos['Age'], bins=bins_cdr_pos, labels=labels_cdr_pos, right=False)

        # Criar tabela de porcentagem por faixa et√°ria e CDR
        cdr_faixa_count = data_cdr_pos.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        total_por_faixa = cdr_faixa_count.groupby('faixa_etaria', observed=True)['Count'].transform('sum')
        cdr_faixa_count['Percent'] = (cdr_faixa_count['Count'] / total_por_faixa) * 100
        cdr_faixa_percent_table = cdr_faixa_count.pivot(index='faixa_etaria', columns='CDR', values='Percent').fillna(0)

        return cdr_faixa_table, cdr_faixa_percent_table

    # Fun√ß√£o para calcular a proje√ß√£o de Alzheimer
    def calcular_projecao_alzheimer():
        populacao_df = pd.read_csv("arquivos/populacao_idosos_2024_2040.csv")
        alzheimer_df = pd.read_csv("arquivos/alzheimer_por_faixa_etaria.csv")

        populacao_long = populacao_df.melt(id_vars="faixa_etaria", var_name="Ano", value_name="Populacao")
        populacao_long = populacao_long.merge(alzheimer_df, on="faixa_etaria")
        populacao_long["Alzheimer_Projecao"] = populacao_long["Populacao"] * (populacao_long["Alzheimer (%)"] / 100)
        populacao_long["Ano"] = populacao_long["Ano"].astype(int)

        return populacao_long

    # Fun√ß√£o para visualizar proje√ß√£o de Alzheimer
    def plot_alzheimer_projection(populacao_long):
        plt.figure(figsize=(12, 6))
        sns.lineplot(data=populacao_long, x="Ano", y="Alzheimer_Projecao", hue="faixa_etaria", marker="o")
        plt.title("Proje√ß√£o de Pessoas com Alzheimer por Faixa Et√°ria (2024‚Äì2040)")
        plt.xlabel("Ano")
        plt.ylabel("N√∫mero Estimado de Pessoas com Alzheimer")
        plt.legend(title="Faixa Et√°ria", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()
        st.pyplot(plt)

    # Fun√ß√£o para calcular proje√ß√£o por CDR
    def calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table):
        alz_idade_ano = populacao_long[['Ano', 'faixa_etaria', 'Alzheimer_Projecao']].copy()

        alz_idade_ano["faixa_etaria_ajustada"] = alz_idade_ano["faixa_etaria"].replace({
            "65-69": "60-69", "70-74": "70-79", "75-79": "70-79",
            "80-84": "80-89", "85-89": "80-89", "90+": "90+"
        })

        df_final = alz_idade_ano.merge(cdr_faixa_percent_table, left_on="faixa_etaria_ajustada", right_on="faixa_etaria", how="left")

        for cdr in [0.5, 1.0, 2.0]:
            df_final[f"CDR {cdr} Projecao"] = (df_final["Alzheimer_Projecao"] * (df_final[cdr] / 100)).round(0).astype(int)

        df_agrupado = df_final.groupby("Ano")[["CDR 0.5 Projecao", "CDR 1.0 Projecao", "CDR 2.0 Projecao"]].sum()
        
        return df_agrupado

    # Fun√ß√£o para visualizar proje√ß√£o por CDR
    def plot_cdr_projection(df_agrupado):
        plt.figure(figsize=(10, 5))
        for col in ["CDR 0.5 Projecao", "CDR 1.0 Projecao", "CDR 2.0 Projecao"]:
            plt.plot(df_agrupado.index, df_agrupado[col], label=col)

        plt.xlabel("Ano")
        plt.ylabel("Quantidade de Casos")
        plt.title("Evolu√ß√£o do n√∫mero de casos de Alzheimer por gravidade")
        plt.legend()
        plt.grid()
        st.pyplot(plt)

    # Configura√ß√£o do Streamlit
    st.title("Dashboard de An√°lise de Alzheimer")

    data_simulacao = load_data_simulacao()
    cdr_faixa_table, cdr_faixa_percent_table = preprocess_cdr_tables(data_simulacao)
    populacao_long = calcular_projecao_alzheimer()
    df_agrupado = calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table)

    # Exibir o gr√°fico principal ocupando toda a largura
    st.subheader("Proje√ß√£o de Pessoas com Alzheimer")
    plot_alzheimer_projection(populacao_long)

    # Criar duas colunas abaixo do gr√°fico principal
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Evolu√ß√£o do N√∫mero de Casos por Gravidade")
        plot_cdr_projection(df_agrupado)

    with col2:
        st.subheader("Tabela de Proje√ß√£o por CDR")
        st.write(df_agrupado)


with tab_conclusoes:
      st.subheader("Conclus√µes")

      with st.container(border=True): 
                st.markdown("""
                - Neste estudo, √© um exemplo de que baixos resultados no MMSE s√£o um sinal de alerta para poss√≠veis casos de dem√™ncia.

                - Pode-se considerar realizar o MMSE a partir dos 60 anos.

                - Exames de imagem s√£o recomendados para fornecer uma conclus√£o ap√≥s os resultados do MMSE.
                """)
